import pandas as pd
import numpy as np

data = pd.DataFrame({'close': [100, 200, 300, 400, 450, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500]})
period = 3
deviation_factor = 1.0

def calculate_ema(prices, period):
    ema_values = np.full(len(prices), np.nan, dtype=np.float64)
    if len(prices) < period:
        return pd.Series(ema_values, index=prices.index)

    sma = np.mean(prices[:period])
    ema_values[period - 1] = sma
    multiplier = 2 / (period + 1)
    for i in range(period, len(prices)):
        ema_values[i] = (prices[i] - ema_values[i - 1]) * multiplier + ema_values[i - 1]
    return pd.Series(ema_values, index=prices.index)

ema = calculate_ema(data['close'], period)
print("EMA:", ema)

volatility = np.std(data['close'])
deviation = deviation_factor * volatility
upper_bound = ema + deviation
lower_bound = ema - deviation

print("Upper Bound:", upper_bound)
print("Lower Bound:", lower_bound)

def generate_trade_signal(data, period, deviation_factor):
    upper_bound, lower_bound = calculate_tunnel_bounds(data, period, deviation_factor)
    if data['close'].iloc[-1] > upper_bound.iloc[-1]:
        return 'BUY'
    elif data['close'].iloc[-1] < lower_bound.iloc[-1]:
        return 'SELL'
    return None

def calculate_tunnel_bounds(data, period, deviation_factor):
    ema = calculate_ema(data['close'], period)
    volatility = np.std(data['close'])
    deviation = deviation_factor * volatility
    upper_bound = ema + deviation
    lower_bound = ema - deviation
    return upper_bound, lower_bound

signal = generate_trade_signal(data, period, deviation_factor)
print("Signal:", signal)
