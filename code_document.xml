<documents>
<document index="1">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\config.py</source>
<document_content>
import os
from dotenv import load_dotenv

script_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.dirname(script_dir)
dotenv_path = os.path.join(project_dir, '.env')

def reload_env():
    load_dotenv(dotenv_path, override=True)

reload_env()

class Config:
    MT5_LOGIN = os.getenv("MT5_LOGIN")
    MT5_PASSWORD = os.getenv("MT5_PASSWORD")
    MT5_SERVER = os.getenv("MT5_SERVER")
    MT5_PATH = os.getenv("MT5_PATH")
    MT5_LOT_SIZE = os.getenv("MT5_LOT_SIZE")
    SYMBOLS = os.getenv("SYMBOLS").split(",")
    MT5_TIMEFRAME = os.getenv("MT5_TIMEFRAME")
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    TELEGRAM_IDS = os.getenv("TELEGRAM_IDS").split(",")
    MIN_TP_PROFIT = os.getenv("MIN_TP_PROFIT")
    MAX_LOSS_PER_DAY = os.getenv("MAX_LOSS_PER_DAY")
    STARTING_EQUITY = os.getenv("STARTING_EQUITY")
    LIMIT_NO_OF_TRADES = os.getenv("LIMIT_NO_OF_TRADES")
    RISK_PER_TRADE = float(os.getenv("RISK_PER_TRADE", 0.01))
    PIP_VALUE = float(os.getenv("PIP_VALUE", 0.0001))
</document_content>
</document>

<document index="2">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\generate_code_document.py</source>
<document_content>
import os

def generate_code_document(root_dir):
    document = "<documents>\n"
    index = 1

    for root, dirs, files in os.walk(root_dir):
        for file in files:
            if file.endswith(".py"):
                file_path = os.path.join(root, file)
                with open(file_path, "r") as f:
                    file_content = f.read()

                document += f"<document index=\"{index}\">\n"
                document += f"<source>{file_path}</source>\n"
                document += "<document_content>\n"
                document += file_content
                document += "\n</document_content>\n"
                document += "</document>\n\n"
                index += 1

    document += "</documents>"
    return document

# Specify the root directory of your repository
root_directory = r"C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot"

# Generate the code document
code_document = generate_code_document(root_directory)

# Specify the output file path
output_file = r"C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\code_document.xml"

# Save the code document to a file
with open(output_file, "w") as file:
    file.write(code_document)

print(f"Code document saved to: {output_file}")
</document_content>
</document>

<document index="3">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\main.py</source>
<document_content>
import signal
from scheduler import setup_schedule, run_scheduled_tasks
from utils.error_handling import handle_error, critical_error
from strategy.trade_logic import calculate_position_size, entry_long, entry_short, exit_trade
from utils.data_validation import validate_data, sanitize_data
from config import Config
from metatrader.connection import initialize_mt5
from metatrader.trade_management import get_open_positions, should_exit_position

def signal_handler(signum, frame):
    critical_error("Signal received, shutting down", f"Signal handler triggered with signal: {signum}")

def main():
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        setup_schedule()
        
        if initialize_mt5():
            account_info = get_account_info()
            account_balance = account_info["balance"]

            for symbol in Config.SYMBOLS:
                data = get_historical_data(symbol, Config.MT5_TIMEFRAME, start_time, end_time)
                sanitized_data = sanitize_data(data)

                if validate_data(sanitized_data, TradeRequestSchema.schema()):
                    signal = generate_trade_signal(sanitized_data, period, deviation)
                    price = sanitized_data["close"].iloc[-1]
                    stop_loss_pips = 20
                    take_profit_pips = 40
                    deviation = 10
                    magic = 12345
                    comment = "Tunnel Strategy"

                    position_size = calculate_position_size(account_balance, Config.RISK_PER_TRADE, stop_loss_pips, Config.PIP_VALUE)

                    if signal == 'BUY':
                        sl = price - (stop_loss_pips * Config.PIP_VALUE)
                        tp = price + (take_profit_pips * Config.PIP_VALUE)
                        entry_long(symbol, position_size, price, sl, tp, deviation, magic, comment)
                    elif signal == 'SELL':
                        sl = price + (stop_loss_pips * Config.PIP_VALUE)
                        tp = price - (take_profit_pips * Config.PIP_VALUE)
                        entry_short(symbol, position_size, price, sl, tp, deviation, magic, comment)
                else:
                    logging.error("Invalid input data")

            open_positions = get_open_positions()
            for position in open_positions:
                if should_exit_position(position):
                    exit_trade(position.ticket)

        run_scheduled_tasks()

    except Exception as e:
        handle_error(e, "Failed to execute trading logic or validate/sanitize input data")

if __name__ == "__main__":
    main()
</document_content>
</document>

<document index="4">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\scheduler.py</source>
<document_content>
import schedule
import time
import logging
from strategy.tunnel_strategy import run_strategy
from metatrader.connection import initialize_mt5
from config import Config
from utils.error_handling import handle_error, warn_error
from strategy.trade_logic import calculate_position_size, entry_long, entry_short, exit_trade
from utils.data_validation import validate_data, sanitize_data
from metatrader.trade_management import get_open_positions, should_exit_position

def initialize_strategy():
    try:
        logging.info("Initializing strategy on server: %s", Config.MT5_SERVER)
        mt5_init = initialize_mt5(
            login=Config.MT5_LOGIN,
            password=Config.MT5_PASSWORD,
            server=Config.MT5_SERVER,
            path=Config.MT5_PATH,
        )

        run_strategy(
            symbols=Config.SYMBOLS,
            mt5_init=mt5_init,
            timeframe=Config.MT5_TIMEFRAME,
            lot_size=Config.MT5_LOT_SIZE,
            min_take_profit=Config.MIN_TP_PROFIT,
            max_loss_per_day=Config.MAX_LOSS_PER_DAY,
            starting_equity=Config.STARTING_EQUITY,
            max_traders_per_day=Config.LIMIT_NO_OF_TRADES
        )
    except Exception as e:
        warn_error(e, "Error initializing strategy")

def run_scheduled_tasks():
    while True:
        try:
            schedule.run_pending()
            time.sleep(1)
        except Exception as e:
            handle_error(e, "Error during scheduled task execution")

def run_trading_task():
    try:
        account_info = get_account_info()
        account_balance = account_info["balance"]

        for symbol in Config.SYMBOLS:
            data = get_historical_data(symbol, Config.MT5_TIMEFRAME, start_time, end_time)
            sanitized_data = sanitize_data(data)

            if validate_data(sanitized_data, TradeRequestSchema.schema()):
                signal = generate_trade_signal(sanitized_data, period, deviation)
                price = sanitized_data["close"].iloc[-1]
                stop_loss_pips = 20
                take_profit_pips = 40
                deviation = 10
                magic = 12345
                comment = "Tunnel Strategy"

                position_size = calculate_position_size(account_balance, Config.RISK_PER_TRADE, stop_loss_pips, Config.PIP_VALUE)

                if signal == 'BUY':
                    sl = price - (stop_loss_pips * Config.PIP_VALUE)
                    tp = price + (take_profit_pips * Config.PIP_VALUE)
                    entry_long(symbol, position_size, price, sl, tp, deviation, magic, comment)
                elif signal == 'SELL':
                    sl = price + (stop_loss_pips * Config.PIP_VALUE)
                    tp = price - (take_profit_pips * Config.PIP_VALUE)
                    entry_short(symbol, position_size, price, sl, tp, deviation, magic, comment)
            else:
                logging.error("Invalid input data")

        open_positions = get_open_positions()
        for position in open_positions:
            if should_exit_position(position):
                exit_trade(position.ticket)

    except Exception as e:
        handle_error(e, "Failed to execute trading task or validate/sanitize input data")

def setup_schedule():
    schedule.every().day.at("09:00").do(initialize_strategy)
    schedule.every(15).minutes.do(run_trading_task)
    logging.info("Scheduler setup complete. Next run at: %s", schedule.next_run())
</document_content>
</document>

<document index="5">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\metatrader\connection.py</source>
<document_content>
import MetaTrader5 as mt5
import MetaTrader4 as mt4
import win32com.client

def connect(login, password, server, path, mt_version):
    if mt_version == 5:
        if not mt5.initialize(path=path, login=login, password=password, server=server):
            print("initialize() failed for MT5, error code =", mt5.last_error())
            return False
        return True
    elif mt_version == 4:
        try:
            mt4_client = mt4.MT4()
            mt4_client.Connect(server, login, password, "")
            return True
        except Exception as e:
            print("initialize() failed for MT4, error =", e)
            return False
    else:
        raise ValueError("Invalid MetaTrader version. Please specify 4 or 5.")

def disconnect(mt_version):
    if mt_version == 5:
        mt5.shutdown()
    elif mt_version == 4:
        try:
            mt4_client = mt4.MT4()
            mt4_client.Disconnect()
        except Exception as e:
            print("disconnect() failed for MT4, error =", e)

def check_connection(mt_version):
    if mt_version == 5:
        return mt5.terminal_info() is not None
    elif mt_version == 4:
        try:
            mt4_client = mt4.MT4()
            return mt4_client.IsConnected()
        except Exception as e:
            print("check_connection() failed for MT4, error =", e)
            return False
    else:
        raise ValueError("Invalid MetaTrader version. Please specify 4 or 5.")
</document_content>
</document>

<document index="6">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\metatrader\data_retrieval.py</source>
<document_content>
import MetaTrader5 as mt5
import pandas as pd
from datetime import datetime
from utils.error_handling import handle_error


def initialize_mt5():
    if not mt5.initialize():
        print("Failed to initialize MetaTrader5")
        mt5.shutdown()
        return False
    return True

def shutdown_mt5():
    mt5.shutdown()

def get_historical_data(symbol, timeframe, start_time, end_time):

    
      try:
        rates = mt5.copy_rates_range(symbol, timeframe, start_time, end_time)
        if rates is None:
            raise Exception(f"Failed to retrieve historical data for {symbol}")

        data = pd.DataFrame(rates, columns=['time', 'open', 'high', 'low', 'close', 'tick_volume', 'spread', 'real_volume'])
        data['time'] = pd.to_datetime(data['time'], unit='s')

        return data

    except Exception as e:
        handle_error(e, f"Failed to retrieve historical data for {symbol}")
        return None
        
    rates = mt5.copy_rates_range(symbol, timeframe, start_time, end_time)
    if rates is None:
        print(f"Failed to retrieve historical data for {symbol}")
        return None

    data = pd.DataFrame(rates, columns=['time', 'open', 'high', 'low', 'close', 'tick_volume', 'spread', 'real_volume'])
    data['time'] = pd.to_datetime(data['time'], unit='s')
    return data


def get_current_price(symbol):
    prices = mt5.symbol_info_tick(symbol)
    if prices:
        return prices.last
    else:
        print(f"Failed to retrieve current price for {symbol}")
        return None

def get_account_info():
    account_info = mt5.account_info()
    if account_info:
        return account_info._asdict()
    else:
        print("Failed to retrieve account information")
        return None

def get_available_symbols():
    symbols = mt5.symbols_get()
    if symbols:
        return [symbol.name for symbol in symbols]
    else:
        print("Failed to retrieve available symbols")
        return None

def get_symbol_info(symbol):
    symbol_info = mt5.symbol_info(symbol)
    if symbol_info:
        return symbol_info._asdict()
    else:
        print(f"Failed to retrieve information for {symbol}")
        return None

def get_positions():
    positions = mt5.positions_get()
    if positions:
        positions_data = []
        for position in positions:
            position_data = position._asdict()
            positions_data.append(position_data)
        return positions_data
    else:
        print("No open positions found")
        return None

def get_orders():
    orders = mt5.orders_get()
    if orders:
        orders_data = []
        for order in orders:
            order_data = order._asdict()
            orders_data.append(order_data)
        return orders_data
    else:
        print("No pending orders found")
        return None

if __name__ == '__main__':
    if initialize_mt5():
        symbol = "EURUSD"
        timeframe = mt5.TIMEFRAME_H1
        start_time = datetime(2023, 1, 1)
        end_time = datetime.now()

        historical_data = get_historical_data(symbol, timeframe, start_time, end_time)
        if historical_data is not None:
            print(f"Historical data for {symbol}:")
            print(historical_data.head())

        current_price = get_current_price(symbol)
        if current_price is not None:
            print(f"Current price for {symbol}: {current_price}")

        account_info = get_account_info()
        if account_info is not None:
            print("Account information:")
            print(account_info)

        available_symbols = get_available_symbols()
        if available_symbols is not None:
            print("Available symbols:")
            print(available_symbols)

        symbol_info = get_symbol_info(symbol)
        if symbol_info is not None:
            print(f"Symbol information for {symbol}:")
            print(symbol_info)

        positions = get_positions()
        if positions is not None:
            print("Open positions:")
            print(positions)

        orders = get_orders()
        if orders is not None:
            print("Pending orders:")
            print(orders)

        shutdown_mt5()
</document_content>
</document>

<document index="7">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\metatrader\indicators.py</source>
<document_content>
import numpy as np

def calculate_ema(prices, period):
    return np.convolve(prices, np.exp(-np.linspace(-1., 0., period)), mode='valid') / np.sum(np.exp(-np.linspace(-1., 0., period)))


</document_content>
</document>

<document index="8">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\metatrader\trade_management.py</source>
<document_content>
import MetaTrader5 as mt5

def place_order(symbol, order_type, volume, price=None, sl=None, tp=None):
    order = mt5.ORDER_TYPE_BUY if order_type == 'buy' else mt5.ORDER_TYPE_SELL
    request = {
        "action": mt5.TRADE_ACTION_DEAL,
        "symbol": symbol,
        "volume": volume,
        "type": order,
        "price": mt5.symbol_info_tick(symbol).ask if order_type == 'buy' else mt5.symbol_info_tick(symbol).bid,
        "sl": sl,
        "tp": tp,
        "deviation": 10,
        "magic": 234000,
        "comment": "python script order",
        "type_time": mt5.ORDER_TIME_GTC,
        "type_filling": mt5.ORDER_FILLING_IOC,
    }
    result = mt5.order_send(request)
    return result.comment if result else 'Order failed'

def close_position(ticket):
    position = mt5.positions_get(ticket=ticket)
    if position:
        result = mt5.Close(ticket)
        return result.comment if result else 'Close failed'
    return 'Position not found'

def modify_order(ticket, sl=None, tp=None):
    result = mt5.order_check(ticket)
    if result and result.type in [mt5.ORDER_TYPE_BUY, mt5.ORDER_TYPE_SELL]:
        request = {
            "action": mt5.TRADE_ACTION_SLTP,
            "ticket": ticket,
            "sl": sl,
            "tp": tp
        }
        result = mt5.order_send(request)
        return result.comment if result else 'Modify failed'
    return 'Order not found'

</document_content>
</document>

<document index="9">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\metatrader\__init__.py</source>
<document_content>
from .data_retrieval import get_historical_data
</document_content>
</document>

<document index="10">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\strategy\trade_logic.py</source>
<document_content>
from metatrader.trade_management import execute_trade, manage_position
from utils.error_handling import handle_error

def calculate_position_size(account_balance, risk_per_trade, stop_loss_pips, pip_value):
    risk_amount = account_balance * risk_per_trade
    position_size = risk_amount / (stop_loss_pips * pip_value)
    return position_size

def entry_long(symbol, lot_size, price, sl, tp, deviation, magic, comment):
    trade_request = {
        'action': 'BUY',
        'symbol': symbol,
        'volume': lot_size,
        'price': price,
        'sl': sl,
        'tp': tp,
        'deviation': deviation,
        'magic': magic,
        'comment': comment,
        'type': 'ORDER_TYPE_BUY',
        'type_filling': 'ORDER_FILLING_FOK',
        'type_time': 'ORDER_TIME_GTC'
    }
    return execute_trade(trade_request)

def entry_short(symbol, lot_size, price, sl, tp, deviation, magic, comment):
    trade_request = {
        'action': 'SELL',
        'symbol': symbol,
        'volume': lot_size,
        'price': price,
        'sl': sl,
        'tp': tp,
        'deviation': deviation,
        'magic': magic,
        'comment': comment,
        'type': 'ORDER_TYPE_SELL',
        'type_filling': 'ORDER_FILLING_FOK',
        'type_time': 'ORDER_TIME_GTC'
    }
    return execute_trade(trade_request)

def exit_trade(position_ticket):
    try:
        close_request = {
            'action': 'CLOSE',
            'position': position_ticket,
            'type': 'ORDER_TYPE_CLOSE',
            'type_filling': 'ORDER_FILLING_FOK',
            'type_time': 'ORDER_TIME_GTC'
        }
        return execute_trade(close_request)
    except Exception as e:
        handle_error(e, "Failed to close the trade")
        return False
</document_content>
</document>

<document index="11">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\strategy\tunnel_strategy.py</source>
<document_content>
import numpy as np
from metatrader.data_retrieval import get_historical_data
from utils.error_handling import handle_error
from indicators import calculate_ema
from trade_management import execute_trade, manage_position

def calculate_tunnel_bounds(data, period, deviation):
    ema = calculate_ema(data['close'], period)
    upper_bound = ema + (deviation * np.std(data['close']))
    lower_bound = ema - (deviation * np.std(data['close']))
    return upper_bound, lower_bound

def generate_trade_signal(data, period, deviation):
    upper_bound, lower_bound = calculate_tunnel_bounds(data, period, deviation)
    
    if data['close'].iloc[-1] > upper_bound[-1]:
        return 'BUY'
    elif data['close'].iloc[-1] < lower_bound[-1]:
        return 'SELL'
    else:
        return None

def run_strategy(symbols, mt5_init, timeframe, lot_size, min_take_profit, max_loss_per_day, starting_equity, max_trades_per_day):
    try:
        for symbol in symbols:
            data = get_historical_data(symbol, timeframe, start_time, end_time)
            if data is None:
                raise Exception(f"Failed to retrieve historical data for {symbol}")

            period = 20
            deviation = 2

            signal = generate_trade_signal(data, period, deviation)

            if signal == 'BUY':
                trade_request = {
                    'action': 'BUY',
                    'symbol': symbol,
                    'volume': lot_size,
                    'price': data['close'].iloc[-1],
                    'sl': data['close'].iloc[-1] - (1.5 * np.std(data['close'])),
                    'tp': data['close'].iloc[-1] + (2 * np.std(data['close'])),
                    'deviation': 10,
                    'magic': 12345,
                    'comment': 'Tunnel Strategy',
                    'type': 'ORDER_TYPE_BUY',
                    'type_filling': 'ORDER_FILLING_FOK',
                    'type_time': 'ORDER_TIME_GTC'
                }
                execute_trade(trade_request)
            elif signal == 'SELL':
                trade_request = {
                    'action': 'SELL',
                    'symbol': symbol,
                    'volume': lot_size,
                    'price': data['close'].iloc[-1],
                    'sl': data['close'].iloc[-1] + (1.5 * np.std(data['close'])),
                    'tp': data['close'].iloc[-1] - (2 * np.std(data['close'])),
                    'deviation': 10,
                    'magic': 12345,
                    'comment': 'Tunnel Strategy',
                    'type': 'ORDER_TYPE_SELL',
                    'type_filling': 'ORDER_FILLING_FOK',
                    'type_time': 'ORDER_TIME_GTC'
                }
                execute_trade(trade_request)

            manage_position(symbol, min_take_profit, max_loss_per_day, starting_equity, max_trades_per_day)

    except Exception as e:
        handle_error(e, "Failed to run the strategy")
</document_content>
</document>

<document index="12">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\strategy\__init__.py</source>
<document_content>
from .tunnel_strategy import run_strategy
</document_content>
</document>

<document index="13">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\tests\test_connection.py</source>
<document_content>
import unittest
from unittest.mock import patch
from metatrader.connection import initialize_mt5, shutdown_mt5

class TestConnection(unittest.TestCase):
    @patch('MetaTrader5.initialize', return_value=True)
    def test_initialize_mt5_success(self, mock_initialize):
        self.assertTrue(initialize_mt5())

    @patch('MetaTrader5.initialize', return_value=False)
    def test_initialize_mt5_failure(self, mock_initialize):
        self.assertFalse(initialize_mt5())

    @patch('MetaTrader5.shutdown')
    def test_shutdown_mt5(self, mock_shutdown):
        shutdown_mt5()
        mock_shutdown.assert_called_once()

if __name__ == '__main__':
    unittest.main()
</document_content>
</document>

<document index="14">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\tests\test_data_retrieval.py</source>
<document_content>
import unittest
from unittest.mock import patch
from datetime import datetime
from metatrader.data_retrieval import get_historical_data

class TestDataRetrieval(unittest.TestCase):
    @patch('MetaTrader5.copy_rates_range', return_value=[])
    def test_get_historical_data_success(self, mock_copy_rates_range):
        symbol = "EURUSD"
        timeframe = 1
        start_time = datetime(2023, 1, 1)
        end_time = datetime.now()
        data = get_historical_data(symbol, timeframe, start_time, end_time)
        self.assertIsNotNone(data)

    @patch('MetaTrader5.copy_rates_range', return_value=None)
    def test_get_historical_data_failure(self, mock_copy_rates_range):
        symbol = "EURUSD"
        timeframe = 1
        start_time = datetime(2023, 1, 1)
        end_time = datetime.now()
        data = get_historical_data(symbol, timeframe, start_time, end_time)
        self.assertIsNone(data)

if __name__ == '__main__':
    unittest.main()
</document_content>
</document>

<document index="15">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\tests\test_indicators.py</source>
<document_content>
import unittest
from indicators import calculate_ema, calculate_rsi

class TestIndicators(unittest.TestCase):
    def test_calculate_ema(self):
        data = [100, 200, 300, 400, 500]
        period = 3
        expected_ema = [100.0, 150.0, 233.33333333333334, 344.44444444444446, 455.55555555555554]
        self.assertEqual(calculate_ema(data, period), expected_ema)

    def test_calculate_rsi(self):
        data = [100, 200, 150, 300, 250]
        period = 3
        expected_rsi = [100.0, 100.0, 50.0, 100.0, 66.66666666666667]
        self.assertEqual(calculate_rsi(data, period), expected_rsi)

if __name__ == '__main__':
    unittest.main()
</document_content>
</document>

<document index="16">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\tests\test_strategy.py</source>
<document_content>
import unittest
from unittest.mock import patch
from strategy.tunnel_strategy import run_strategy

class TestStrategy(unittest.TestCase):
    @patch('metatrader.data_retrieval.get_historical_data', return_value=None)
    def test_run_strategy_failure(self, mock_get_historical_data):
        symbols = ["EURUSD"]
        mt5_init = True
        timeframe = 1
        lot_size = 0.1
        min_take_profit = 100
        max_loss_per_day = 1000
        starting_equity = 10000
        max_traders_per_day = 5
        with self.assertRaises(Exception):
            run_strategy(symbols, mt5_init, timeframe, lot_size, min_take_profit, max_loss_per_day, starting_equity, max_traders_per_day)

if __name__ == '__main__':
    unittest.main()
</document_content>
</document>

<document index="17">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\tests\test_trade_management.py</source>
<document_content>
import unittest
from unittest.mock import patch
from trade_management import execute_trade, manage_position

class TestTradeManagement(unittest.TestCase):
    @patch('MetaTrader5.order_send', return_value={'retcode': 10009})  # 10009: SUCCESS
    def test_execute_trade_success(self, mock_order_send):
        trade_request = {
            'action': 'BUY',
            'symbol': 'EURUSD',
            'volume': 0.1,
            'price': 1.2345,
            'sl': 1.2300,
            'tp': 1.2400,
            'deviation': 10,
            'magic': 12345,
            'comment': 'Test Trade',
            'type': 'ORDER_TYPE_BUY',
            'type_filling': 'ORDER_FILLING_FOK',
            'type_time': 'ORDER_TIME_GTC'
        }
        result = execute_trade(trade_request)
        self.assertTrue(result)

    @patch('MetaTrader5.order_send', return_value={'retcode': 10004})  # 10004: ERROR
    def test_execute_trade_failure(self, mock_order_send):
        trade_request = {
            'action': 'BUY',
            'symbol': 'EURUSD',
            'volume': 0.1,
            'price': 1.2345,
            'sl': 1.2300,
            'tp': 1.2400,
            'deviation': 10,
            'magic': 12345,
            'comment': 'Test Trade',
            'type': 'ORDER_TYPE_BUY',
            'type_filling': 'ORDER_FILLING_FOK',
            'type_time': 'ORDER_TIME_GTC'
        }
        result = execute_trade(trade_request)
        self.assertFalse(result)

    # Add more test cases for manage_position and other functions

if __name__ == '__main__':
    unittest.main()
</document_content>
</document>

<document index="18">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\tests\__init__.py</source>
<document_content>

</document_content>
</document>

<document index="19">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\utils\data_validation.py</source>
<document_content>
from typing import Any
from pydantic import BaseModel, ValidationError
import logging

class TradeRequestSchema(BaseModel):
    action: str
    symbol: str
    volume: float
    price: float
    sl: float
    tp: float
    deviation: int
    magic: int
    comment: str
    type: str
    type_filling: str
    type_time: str

class CloseRequestSchema(BaseModel):
    action: str
    position: int
    type: str
    type_filling: str
    type_time: str

def validate_data(data: Any, schema: dict) -> bool:
    """
    Validate data against a specified schema.
    """
    try:
        if schema == TradeRequestSchema.schema():
            TradeRequestSchema(**data)
        elif schema == CloseRequestSchema.schema():
            CloseRequestSchema(**data)
        else:
            raise ValueError("Invalid schema provided")
        return True
    except ValidationError as e:
        logging.error(f"Data validation failed: {str(e)}")
        return False

def sanitize_data(data: Any) -> Any:
    """
    Sanitize and clean the input data.
    """
    try:
        if isinstance(data, dict):
            sanitized_data = {}
            for key, value in data.items():
                sanitized_data[key.strip()] = sanitize_data(value)
            return sanitized_data
        elif isinstance(data, list):
            return [sanitize_data(item) for item in data]
        elif isinstance(data, str):
            return data.strip()
        else:
            return data
    except Exception as e:
        logging.error(f"Data sanitization failed: {str(e)}")
        return None
    
def validate_trade_request(trade_request):
    required_fields = ['action', 'symbol', 'volume', 'price', 'sl', 'tp', 'deviation', 'magic', 'comment', 'type', 'type_filling', 'type_time']
    for field in required_fields:
        if field not in trade_request:
            raise ValueError(f"Missing required field: {field}")

    if trade_request['action'] not in ['BUY', 'SELL']:
        raise ValueError("Invalid trade action. Must be 'BUY' or 'SELL'")

    if trade_request['type'] not in ['ORDER_TYPE_BUY', 'ORDER_TYPE_SELL']:
        raise ValueError("Invalid order type. Must be 'ORDER_TYPE_BUY' or 'ORDER_TYPE_SELL'")

    if trade_request['type_filling'] != 'ORDER_FILLING_FOK':
        raise ValueError("Invalid order filling type. Must be 'ORDER_FILLING_FOK'")

    if trade_request['type_time'] != 'ORDER_TIME_GTC':
        raise ValueError("Invalid order time type. Must be 'ORDER_TIME_GTC'")

def validate_close_request(close_request):
    required_fields = ['action', 'position', 'type', 'type_filling', 'type_time']
    for field in required_fields:
        if field not in close_request:
            raise ValueError(f"Missing required field: {field}")

    if close_request['action'] != 'CLOSE':
        raise ValueError("Invalid close action. Must be 'CLOSE'")

    if close_request['type'] != 'ORDER_TYPE_CLOSE':
        raise ValueError("Invalid order type. Must be 'ORDER_TYPE_CLOSE'")

    if close_request['type_filling'] != 'ORDER_FILLING_FOK':
        raise ValueError("Invalid order filling type. Must be 'ORDER_FILLING_FOK'")

    if close_request['type_time'] != 'ORDER_TIME_GTC':
        raise ValueError("Invalid order time type. Must be 'ORDER_TIME_GTC'")
</document_content>
</document>

<document index="20">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\utils\error_handling.py</source>
<document_content>
import logging

# Setup the logging configuration in this module if not already configured
logging.basicConfig(level=logging.ERROR, format='%(asctime)s - %(levelname)s - %(message)s')

def handle_error(err, message="An error occurred"):
    """ General error handling function. """
    logging.error(f"{message}: {str(err)}")

def critical_error(err, message="A critical error occurred", exit_code=1):
    """ Handle critical errors that require shutting down the application. """
    logging.critical(f"{message}: {str(err)}")
    exit(exit_code)

def warn_error(err, message="A warning error occurred"):
    """ Log warnings that do not require stopping the application. """
    logging.warning(f"{message}: {str(err)}")

</document_content>
</document>

<document index="21">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\utils\logger.py</source>
<document_content>
import logging
import os
from logging.handlers import RotatingFileHandler

def setup_logging(log_level=logging.INFO, log_file="app.log", max_size=10485760, backup_count=10):
    """
    Set up logging configuration.
    """
    log_formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")

    file_handler = RotatingFileHandler(log_file, maxBytes=max_size, backupCount=backup_count)
    file_handler.setFormatter(log_formatter)

    console_handler = logging.StreamHandler()
    console_handler.setFormatter(log_formatter)

    logging.basicConfig(level=log_level, handlers=[file_handler, console_handler])
</document_content>
</document>

<document index="22">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\utils\types.py</source>
<document_content>
from typing import NewType

TradeAction = NewType('TradeAction', str)
OrderType = NewType('OrderType', str)
OrderFilling = NewType('OrderFilling', str)
OrderTime = NewType('OrderTime', str)
# Define custom types
Symbol = NewType("Symbol", str)
Timeframe = NewType("Timeframe", str)
LotSize = NewType("LotSize", float)
</document_content>
</document>

<document index="23">
<source>C:\Users\Owner\Desktop\upwork_projects\Wavy_Tunnel_Bot\utils\__init__.py</source>
<document_content>
from .data_validation import validate_trade_request, validate_close_request
from .types import TradeAction, OrderType, OrderFilling, OrderTime
</document_content>
</document>

</documents>