<documents>
<document index="1">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\config.py</source>
<document_content>
import os
from dotenv import load_dotenv
from utils.error_handling import handle_error, critical_error
import logging

script_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.dirname(script_dir)
dotenv_path = os.path.join(project_dir, '.env')

def reload_env():
    load_dotenv(dotenv_path, override=True)

reload_env()

class Config:
    MT5_LOGIN = os.getenv("MT5_LOGIN")
    if not MT5_LOGIN:
        raise ValueError("MT5_LOGIN environment variable is not set.")

    MT5_PASSWORD = os.getenv("MT5_PASSWORD")
    if not MT5_PASSWORD:
        raise ValueError("MT5_PASSWORD environment variable is not set.")

    MT5_SERVER = os.getenv("MT5_SERVER")
    if not MT5_SERVER:
        raise ValueError("MT5_SERVER environment variable is not set.")

    MT5_PATH = os.getenv("MT5_PATH")
    if not MT5_PATH:
        raise ValueError("MT5_PATH environment variable is not set.")

    MT5_TIMEFRAME = os.getenv("MT5_TIMEFRAME")
    if MT5_TIMEFRAME not in ["M1", "M5", "M15", "M30", "H1", "H4", "D1"]:
        raise ValueError(f"Invalid MT5_TIMEFRAME value: {MT5_TIMEFRAME}. Expected values: M1, M5, M15, M30, H1, H4, D1.")

    SYMBOLS = os.getenv("SYMBOLS")
    if SYMBOLS:
        SYMBOLS = SYMBOLS.split(",")
    else:
        raise ValueError("SYMBOLS environment variable is not set.")

    TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    TELEGRAM_IDS = os.getenv("TELEGRAM_IDS")
    if TELEGRAM_TOKEN and TELEGRAM_IDS:
        TELEGRAM_IDS = TELEGRAM_IDS.split(",")
    else:
        TELEGRAM_TOKEN = None
        TELEGRAM_IDS = None

    try:
        MIN_TP_PROFIT = float(os.getenv("MIN_TP_PROFIT", 50.0))
    except (ValueError, TypeError):
        raise ValueError(f"Invalid MIN_TP_PROFIT value: {os.getenv('MIN_TP_PROFIT')}. Expected a numeric value.")

    try:
        MAX_LOSS_PER_DAY = float(os.getenv("MAX_LOSS_PER_DAY", 1000.0))
    except (ValueError, TypeError):
        raise ValueError(f"Invalid MAX_LOSS_PER_DAY value: {os.getenv('MAX_LOSS_PER_DAY')}. Expected a numeric value.")

    try:
        STARTING_EQUITY = float(os.getenv("STARTING_EQUITY", 10000.0))
    except (ValueError, TypeError):
        raise ValueError(f"Invalid STARTING_EQUITY value: {os.getenv('STARTING_EQUITY')}. Expected a numeric value.")

    try:
        LIMIT_NO_OF_TRADES = int(os.getenv("LIMIT_NO_OF_TRADES", 5))
    except (ValueError, TypeError):
        raise ValueError(f"Invalid LIMIT_NO_OF_TRADES value: {os.getenv('LIMIT_NO_OF_TRADES')}. Expected an integer value.")

    try:
        RISK_PER_TRADE = float(os.getenv("RISK_PER_TRADE", 0.01))
    except ValueError:
        raise ValueError(f"Invalid RISK_PER_TRADE value: {os.getenv('RISK_PER_TRADE')}. Expected a numeric value.")

    if not 0 < RISK_PER_TRADE <= 1:
        raise ValueError(f"RISK_PER_TRADE value must be between 0 and 1. Current value: {RISK_PER_TRADE}")

    try:
        PIP_VALUE = float(os.getenv("PIP_VALUE", 1))
    except ValueError:
        raise ValueError(f"Invalid PIP_VALUE value: {os.getenv('PIP_VALUE')}. Expected a numeric value.")

    @classmethod
    def validate(cls):
        try:
            required_vars = [
                'MT5_LOGIN', 'MT5_PASSWORD', 'MT5_SERVER', 'MT5_PATH',
                'MT5_TIMEFRAME', 'SYMBOLS'
            ]
            for var in required_vars:
                if not getattr(cls, var, None):
                    raise ValueError(f"Missing required environment variable: {var}")

            numeric_vars = ['MIN_TP_PROFIT', 'MAX_LOSS_PER_DAY', 'STARTING_EQUITY', 'RISK_PER_TRADE', 'PIP_VALUE']
            for var in numeric_vars:
                if not isinstance(getattr(cls, var, None), (int, float)):
                    raise ValueError(f"Invalid value for {var}. Expected a numeric value.")

            if not isinstance(cls.LIMIT_NO_OF_TRADES, int):
                raise ValueError(f"Invalid value for LIMIT_NO_OF_TRADES. Expected an integer value.")

        except ValueError as e:
            handle_error(e, "Configuration validation failed")
            critical_error(e, "Invalid configuration settings")


    @classmethod
    def log_config(cls):
        for attr, value in cls.__dict__.items():
            if not callable(value) and not attr.startswith("__") and not isinstance(value, classmethod):
                logging.info(f"{attr}: {value}")

try:
    Config.validate()
except Exception as e:
    handle_error(e, "Error occurred during configuration validation")
    raise

</document_content>
</document>

<document index="2">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\main.py</source>
<document_content>
import MetaTrader5 as mt5
import pandas as pd
from datetime import datetime
from config import Config
from metatrader.connection import initialize_mt5, shutdown_mt5
from metatrader.data_retrieval import get_historical_data
from strategy.tunnel_strategy import run_strategy, calculate_ema, detect_peaks_and_dips, check_entry_conditions
from backtesting.backtest import run_backtest
from utils.logger import setup_logging
from utils.error_handling import handle_error
import logging
import argparse
from ui import run_ui

def run_backtest_func():
    try:
        # Initialize MetaTrader5
        logging.info("Initializing MetaTrader5...")
        if not initialize_mt5(Config.MT5_PATH):
            raise Exception("Failed to initialize MetaTrader5")
        logging.info("MetaTrader5 initialized successfully.")

        for symbol in Config.SYMBOLS:
            logging.info("Running backtest...")
            start_date = datetime(2022, 1, 1)
            end_date = datetime(2022, 1, 5)
            initial_balance = 10000
            risk_percent = Config.RISK_PER_TRADE

            backtest_data = get_historical_data(symbol, mt5.TIMEFRAME_H1, start_date, end_date)
            if backtest_data is not None and not backtest_data.empty:
                logging.info(f"Backtest data shape: {backtest_data.shape}")
                logging.info(f"Backtest data head:\n{backtest_data.head()}")
            else:
                logging.error(f"No historical data retrieved for {symbol} for backtesting")
                continue

            # Ensure there are enough data points for the indicators
            if len(backtest_data) < 20:
                logging.error(f"Not enough data for symbol {symbol} to perform backtest")
                continue

            try:
                run_backtest(
                    symbol=symbol,
                    data=backtest_data,
                    initial_balance=initial_balance,
                    risk_percent=risk_percent,
                    min_take_profit=Config.MIN_TP_PROFIT,
                    max_loss_per_day=Config.MAX_LOSS_PER_DAY,
                    starting_equity=Config.STARTING_EQUITY,
                    max_trades_per_day=Config.LIMIT_NO_OF_TRADES
                )
                logging.info("Backtest completed successfully.")
            except Exception as e:
                handle_error(e, f"An error occurred during backtesting for {symbol}")

    except Exception as e:
        error_code = mt5.last_error()
        error_message = "An error occurred"
        handle_error(e, f"An error occurred in the run_backtest_func: {error_code} - {error_message}")

    finally:
        logging.info("Shutting down MetaTrader5...")
        shutdown_mt5()
        logging.info("MetaTrader5 connection gracefully shut down.")

def run_live_trading_func():
    try:
        # Initialize MetaTrader5
        logging.info("Initializing MetaTrader5...")
        if not initialize_mt5(Config.MT5_PATH):
            raise Exception("Failed to initialize MetaTrader5")
        logging.info("MetaTrader5 initialized successfully.")

        for symbol in Config.SYMBOLS:
            logging.info("Running live trading...")
            run_strategy(
                symbols=[symbol],
                mt5_init=mt5,
                timeframe=mt5.TIMEFRAME_M1,
                lot_size=0.01,
                min_take_profit=Config.MIN_TP_PROFIT,
                max_loss_per_day=Config.MAX_LOSS_PER_DAY,
                starting_equity=Config.STARTING_EQUITY,
                max_trades_per_day=Config.LIMIT_NO_OF_TRADES,
                run_backtest=False
            )
            logging.info("Live trading completed.")

    except Exception as e:
        error_code = mt5.last_error()
        error_message = "An error occurred"
        handle_error(e, f"An error occurred in the run_live_trading_func: {error_code} - {error_message}")

    finally:
        logging.info("Shutting down MetaTrader5...")
        shutdown_mt5()
        logging.info("MetaTrader5 connection gracefully shut down.")

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--ui", action="store_true", help="Run the UI")
    args = parser.parse_args()

    try:
        setup_logging()
        logging.info("STARTING APPLICATION")

        # Log configuration settings
        logging.info("LOGGING ALL THE CONFIG SETTINGS")
        Config.log_config()

        if args.ui:
            run_ui(run_backtest_func, run_live_trading_func)
        else:
            # Prompt the user to choose between backtesting and live trading
            print("Choose an option:")
            print("1. Run Backtesting")
            print("2. Run Live Trading")
            choice = input("Enter your choice (1 or 2): ")

            if choice == "1":
                run_backtest_func()
            elif choice == "2":
                run_live_trading_func()
            else:
                print("Invalid choice. Exiting...")

    except Exception as e:
        error_code = mt5.last_error()
        error_message = "An error occurred"
        handle_error(e, f"An error occurred in the main function: {error_code} - {error_message}")

if __name__ == '__main__':
    main()
</document_content>
</document>

<document index="3">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\scheduler.py</source>
<document_content>
import schedule
import time
import logging
from strategy.tunnel_strategy import run_strategy
from metatrader.connection import initialize_mt5
from config import Config
from utils.error_handling import handle_error, warn_error
from strategy.trade_logic import calculate_position_size, entry_long, entry_short, exit_trade
from utils.data_validation import validate_data, sanitize_data
from metatrader.trade_management import get_open_positions, should_exit_position

def initialize_strategy():
    try:
        logging.info("Initializing strategy on server: %s", Config.MT5_SERVER)
        mt5_init = initialize_mt5(
            login=Config.MT5_LOGIN,
            password=Config.MT5_PASSWORD,
            server=Config.MT5_SERVER,
            path=Config.MT5_PATH,
        )

        run_strategy(
            symbols=Config.SYMBOLS,
            mt5_init=mt5_init,
            timeframe=Config.MT5_TIMEFRAME,
            lot_size=Config.MT5_LOT_SIZE,
            min_take_profit=Config.MIN_TP_PROFIT,
            max_loss_per_day=Config.MAX_LOSS_PER_DAY,
            starting_equity=Config.STARTING_EQUITY,
            max_traders_per_day=Config.LIMIT_NO_OF_TRADES
        )
    except Exception as e:
        warn_error(e, "Error initializing strategy")

def run_scheduled_tasks():
    while True:
        try:
            schedule.run_pending()
            time.sleep(1)
        except Exception as e:
            handle_error(e, "Error during scheduled task execution")

def run_trading_task():
    try:
        account_info = get_account_info()
        account_balance = account_info["balance"]

        for symbol in Config.SYMBOLS:
            data = get_historical_data(symbol, Config.MT5_TIMEFRAME, start_time, end_time)
            sanitized_data = sanitize_data(data)

            if validate_data(sanitized_data, TradeRequestSchema.schema()):
                signal = generate_trade_signal(sanitized_data, period, deviation)
                price = sanitized_data["close"].iloc[-1]
                stop_loss_pips = 20
                take_profit_pips = 40
                deviation = 10
                magic = 12345
                comment = "Tunnel Strategy"

                position_size = calculate_position_size(account_balance, Config.RISK_PER_TRADE, stop_loss_pips, Config.PIP_VALUE)

                if signal == 'BUY':
                    sl = price - (stop_loss_pips * Config.PIP_VALUE)
                    tp = price + (take_profit_pips * Config.PIP_VALUE)
                    entry_long(symbol, position_size, price, sl, tp, deviation, magic, comment)
                elif signal == 'SELL':
                    sl = price + (stop_loss_pips * Config.PIP_VALUE)
                    tp = price - (take_profit_pips * Config.PIP_VALUE)
                    entry_short(symbol, position_size, price, sl, tp, deviation, magic, comment)
            else:
                logging.error("Invalid input data")

        open_positions = get_open_positions()
        for position in open_positions:
            if should_exit_position(position):
                exit_trade(position.ticket)

    except Exception as e:
        handle_error(e, "Failed to execute trading task or validate/sanitize input data")

def setup_schedule():
    schedule.every().day.at("09:00").do(initialize_strategy)
    schedule.every(15).minutes.do(run_trading_task)
    logging.info("Scheduler setup complete. Next run at: %s", schedule.next_run())

def adjust_schedule(market_conditions):
    if market_conditions == 'volatile':
        schedule.every(5).minutes.do(run_trading_task)
    elif market_conditions == 'calm':
        schedule.every(30).minutes.do(run_trading_task)

# Call adjust_schedule() based on market conditions
market_conditions = analyze_market_conditions()
adjust_schedule(market_conditions)
</document_content>
</document>

<document index="4">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\ui.py</source>
<document_content>
# import tkinter as tk
# from tkinter import ttk
# from config import Config
# import ast

# def run_ui(run_backtest_func, run_live_trading_func):
#     window = tk.Tk()
#     window.title("Wavy Tunnel Bot")
#     window.geometry("600x400")
#     window.withdraw()

#     def update_config():
#         config_values = {}
#         for attr, entry in config_entries.items():
#             value = entry.get()
#             if value != "":
#                 try:
#                     config_values[attr] = ast.literal_eval(value)
#                 except (ValueError, SyntaxError):
#                     config_values[attr] = value

#         for attr, value in config_values.items():
#             setattr(Config, attr, value)

#         config_window.destroy()
#         mode_window.deiconify()

#     def open_config_window():
#         mode_window.withdraw()
#         config_window.deiconify()

#     def run_backtest():
#         mode_window.destroy()
#         window.destroy()
#         run_backtest_func()

#     def run_live_trading():
#         mode_window.destroy()
#         window.destroy()
#         run_live_trading_func()

#     # Mode Selection Window
#     mode_window = tk.Toplevel(window)
#     mode_window.title("Select Mode")
#     mode_window.geometry("600x400")
#     mode_window.withdraw()

#     mode_label = ttk.Label(mode_window, text="Select Mode", font=("Arial", 16))
#     mode_label.pack(pady=20)

#     backtest_button = ttk.Button(mode_window, text="Run Backtesting", command=run_backtest)
#     backtest_button.pack(pady=10)

#     live_trading_button = ttk.Button(mode_window, text="Run Live Trading", command=run_live_trading)
#     live_trading_button.pack(pady=10)

#     config_button = ttk.Button(mode_window, text="Configuration Settings", command=open_config_window)
#     config_button.pack(pady=10)

#     # Configuration Settings Window
#     config_window = tk.Toplevel(window)
#     config_window.title("Configuration Settings")
#     config_window.geometry("600x400")

#     config_label = ttk.Label(config_window, text="Configuration Settings", font=("Arial", 16))
#     config_label.pack(pady=20)

#     config_canvas = tk.Canvas(config_window)
#     config_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

#     scrollbar = ttk.Scrollbar(config_window, orient=tk.VERTICAL, command=config_canvas.yview)
#     scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

#     config_canvas.configure(yscrollcommand=scrollbar.set)
#     config_canvas.bind('<Configure>', lambda e: config_canvas.configure(scrollregion=config_canvas.bbox('all')))

#     config_frame = ttk.Frame(config_canvas)
#     config_canvas.create_window((0, 0), window=config_frame, anchor='nw')

#     config_entries = {}
#     for attr, value in Config.__dict__.items():
#         if not callable(value) and not attr.startswith("__"):
#             attr_label = ttk.Label(config_frame, text=attr)
#             attr_label.grid(row=len(config_entries), column=0, padx=5, pady=5, sticky="e")

#             attr_entry = ttk.Entry(config_frame, width=40)
#             attr_entry.insert(0, str(value))
#             attr_entry.grid(row=len(config_entries), column=1, padx=5, pady=5)

#             config_entries[attr] = attr_entry

#     update_button = ttk.Button(config_window, text="Update Settings", command=update_config)
#     update_button.pack(pady=10)

#     config_window.deiconify()

#     window.mainloop()

import tkinter as tk
from tkinter import ttk
from config import Config
import ast

def run_ui(run_backtest_func, run_live_trading_func):
    window = tk.Tk()
    window.title("Wavy Tunnel Bot")
    window.geometry("600x400")
    window.withdraw()

    def update_config():
        config_values = {}
        for attr, entry in config_entries.items():
            value = entry.get()
            if value != "":
                try:
                    config_values[attr] = ast.literal_eval(value)
                except (ValueError, SyntaxError):
                    config_values[attr] = value

        for attr, value in config_values.items():
            setattr(Config, attr, value)

        config_window.destroy()
        mode_window.deiconify()

    def open_config_window():
        mode_window.withdraw()
        config_window.deiconify()

    def run_backtest():
        mode_window.destroy()
        window.destroy()
        run_backtest_func()

    def run_live_trading():
        mode_window.destroy()
        window.destroy()
        run_live_trading_func()

    def open_mode_window():
        welcome_window.destroy()
        mode_window.deiconify()

    # Apply a theme
    style = ttk.Style()
    style.theme_use('clam')

    # Welcome Screen Window
    welcome_window = tk.Toplevel(window)
    welcome_window.title("Welcome")
    welcome_window.geometry("600x400")

    welcome_label = ttk.Label(welcome_window, text="Welcome to the Wavy Tunnel Bot", font=("Arial", 20))
    welcome_label.pack(pady=50)

    proceed_button = ttk.Button(welcome_window, text="Proceed", command=open_mode_window)
    proceed_button.pack(pady=20)

    # Mode Selection Window
    mode_window = tk.Toplevel(window)
    mode_window.title("Select Mode")
    mode_window.geometry("600x400")
    mode_window.withdraw()

    mode_label = ttk.Label(mode_window, text="Select Mode", font=("Arial", 16))
    mode_label.pack(pady=20)

    backtest_button = ttk.Button(mode_window, text="Run Backtesting", command=run_backtest)
    backtest_button.pack(pady=10)

    live_trading_button = ttk.Button(mode_window, text="Run Live Trading", command=run_live_trading)
    live_trading_button.pack(pady=10)

    config_button = ttk.Button(mode_window, text="Configuration Settings", command=open_config_window)
    config_button.pack(pady=10)

    # Configuration Settings Window
    config_window = tk.Toplevel(window)
    config_window.title("Configuration Settings")
    config_window.geometry("600x400")
    config_window.withdraw()

    config_label = ttk.Label(config_window, text="Configuration Settings", font=("Arial", 16))
    config_label.pack(pady=20)

    config_canvas = tk.Canvas(config_window)
    config_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

    scrollbar = ttk.Scrollbar(config_window, orient=tk.VERTICAL, command=config_canvas.yview)
    scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    config_canvas.configure(yscrollcommand=scrollbar.set)
    config_canvas.bind('<Configure>', lambda e: config_canvas.configure(scrollregion=config_canvas.bbox('all')))

    config_frame = ttk.Frame(config_canvas)
    config_canvas.create_window((0, 0), window=config_frame, anchor='nw')

    config_entries = {}
    for attr, value in Config.__dict__.items():
        if not callable(value) and not attr.startswith("__") and attr not in ["validate", "log_config"]:
            attr_label = ttk.Label(config_frame, text=attr)
            attr_label.grid(row=len(config_entries), column=0, padx=5, pady=5, sticky="e")

            attr_entry = ttk.Entry(config_frame, width=40)
            attr_entry.insert(0, str(value))
            attr_entry.grid(row=len(config_entries), column=1, padx=5, pady=5)

            config_entries[attr] = attr_entry

    update_button = ttk.Button(config_window, text="Update Settings", command=update_config)
    update_button.pack(pady=10)

    window.mainloop()

</document_content>
</document>

<document index="5">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\backtesting\backtest.py</source>
<document_content>
import pandas as pd
from datetime import datetime
from metatrader.data_retrieval import get_historical_data
from strategy.tunnel_strategy import generate_trade_signal, execute_trade, manage_position
from utils.plotting import plot_backtest_results
from utils.error_handling import handle_error
from config import Config
import logging

import logging

def run_backtest(symbol, data, initial_balance, risk_percent, min_take_profit, max_loss_per_day, starting_equity, max_trades_per_day):
    balance = initial_balance
    trades = []
    stop_loss_pips = 20  # Example value for stop loss in pips
    pip_value = Config.PIP_VALUE

    logging.info(f"Initial balance: {balance}")

    # Validate critical parameters
    if stop_loss_pips == 0:
        logging.error(f"stop_loss_pips is zero. This value must not be zero.")
        return
    if pip_value == 0:
        logging.error(f"pip_value is zero. This value must not be zero.")
        return

    for i in range(20, len(data)):  # Start after enough data points are available
        logging.info(f"Iteration: {i}")
        logging.info(f"Data shape: {data.iloc[:i+1].shape}")
        logging.info(f"Data head:\n{data.iloc[:i+1].head()}")

        # Calculate indicators and generate trading signals
        signal = generate_trade_signal(data.iloc[:i+1], period=20, deviation_factor=2.0)

        try:
            position_size = calculate_position_size(balance, risk_percent, stop_loss_pips, pip_value)
        except ZeroDivisionError as e:
            logging.error(f"Division by zero occurred in calculate_position_size: {e}. Variables - balance: {balance}, risk_percent: {risk_percent}, stop_loss_pips: {stop_loss_pips}, pip_value: {pip_value}")
            continue

        if signal == 'BUY':
            # Simulate trade entry
            trade = {
                'entry_time': data.iloc[i]['time'],
                'entry_price': data.iloc[i]['close'],
                'volume': position_size
            }
            trades.append(trade)
            execute_trade(trade)
            logging.info(f"Balance after BUY trade: {balance}")

        elif signal == 'SELL':
            # Simulate trade exit
            if trades:
                trade = trades[-1]
                trade['exit_time'] = data.iloc[i]['time']
                trade['exit_price'] = data.iloc[i]['close']
                trade['profit'] = (trade['exit_price'] - trade['entry_price']) * trade['volume'] * pip_value
                try:
                    balance += trade['profit']
                except KeyError as e:
                    logging.error(f"KeyError occurred while updating balance: {e}")
                execute_trade(trade)
                logging.info(f"Balance after SELL trade: {balance}")

        manage_position(symbol, min_take_profit, max_loss_per_day, starting_equity, max_trades_per_day)

    logging.info(f"Final balance: {balance}")

    total_profit = sum(trade['profit'] for trade in trades if 'profit' in trade)
    num_trades = len(trades)
    win_rate = sum(1 for trade in trades if 'profit' in trade and trade['profit'] > 0) / num_trades if num_trades > 0 else 0
    max_drawdown = calculate_max_drawdown(trades, initial_balance)

    logging.info(f"Total Profit: {total_profit:.2f}")
    logging.info(f"Number of Trades: {num_trades}")
    logging.info(f"Win Rate: {win_rate:.2%}")
    logging.info(f"Maximum Drawdown: {max_drawdown:.2f}")
    print(f"stop_loss_pips: {stop_loss_pips}")
    print(f"pip_value: {pip_value}")
    # Plot backtest results
    #plot_backtest_results(data, trades)

def calculate_max_drawdown(trades, initial_balance):
    balance = initial_balance
    max_balance = initial_balance
    max_drawdown = 0

    for trade in trades:
        if 'profit' in trade:
            balance += trade['profit']
            max_balance = max(max_balance, balance)
            drawdown = max_balance - balance
            max_drawdown = max(max_drawdown, drawdown)

    return max_drawdown

def calculate_position_size(account_balance, risk_per_trade, stop_loss_pips, pip_value):
    risk_amount = account_balance * risk_per_trade
    if stop_loss_pips == 0 or pip_value == 0:
        logging.error("stop_loss_pips or pip_value cannot be zero.")
        return 0  # Return 0 or handle the error appropriately

    position_size = risk_amount / (stop_loss_pips * pip_value)
    return position_size

def generate_trade_signal(data, period, deviation_factor):
    # Placeholder for generating trade signals
    return 'BUY' if data['close'].iloc[-1] > data['close'].mean() else 'SELL'

def execute_trade(trade):
    # Placeholder for executing trades
    pass

def manage_position(symbol, min_take_profit, max_loss_per_day, starting_equity, max_trades_per_day):
    # Placeholder for managing positions
    pass

</document_content>
</document>

<document index="6">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\metatrader\connection.py</source>
<document_content>
import MetaTrader5 as mt5
# import MetaTrader4 as mt4
import win32com.client
import time

def connect(login, password, server, path, mt_version):
    if mt_version == 5:
        if not mt5.initialize(path=path, login=login, password=password, server=server):
            print("initialize() failed for MT5, error code =", mt5.last_error())
            return False
        return True
    # elif mt_version == 4:
    #     try:
    #         mt4_client = mt4.MT4()
    #         mt4_client.Connect(server, login, password, "")
    #         return True
    #     except Exception as e:
    #         print("initialize() failed for MT4, error =", e)
    #         return False
    else:
        raise ValueError("Invalid MetaTrader version. Please specify 4 or 5.")

def disconnect(mt_version):
    if mt_version == 5:
        mt5.shutdown()
    # elif mt_version == 4:
    #     try:
    #         mt4_client = mt4.MT4()
    #         mt4_client.Disconnect()
    #     except Exception as e:
    #         print("disconnect() failed for MT4, error =", e)

def check_connection(mt_version):
    if mt_version == 5:
        return mt5.terminal_info() is not None
    # elif mt_version == 4:
    #     try:
    #         mt4_client = mt4.MT4()
    #         return mt4_client.IsConnected()
    #     except Exception as e:
    #         print("check_connection() failed for MT4, error =", e)
    #         return False
    # else:
    #     raise ValueError("Invalid MetaTrader version. Please specify 4 or 5.")

def initialize_mt5(mt5_path):
    # Initialize MetaTrader 5
    if not mt5.initialize(path=mt5_path):
        print("Failed to initialize MetaTrader 5 terminal.")
        mt5.shutdown()
        return False
    else:
        print("MetaTrader 5 terminal initialized successfully.")
        return True

def shutdown_mt5():
    # Shutdown MetaTrader 5
    mt5.shutdown()
    print("MetaTrader 5 connection gracefully shut down.")

</document_content>
</document>

<document index="7">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\metatrader\data_retrieval.py</source>
<document_content>
import MetaTrader5 as mt5
import pandas as pd
import requests_cache
from datetime import datetime, timedelta
from requests_cache import CachedSession
from utils.error_handling import handle_error


def initialize_mt5():
    if not mt5.initialize():
        print("Failed to initialize MetaTrader5")
        mt5.shutdown()
        return False
    return True

def shutdown_mt5():
    mt5.shutdown()

start_time = datetime.now() - timedelta(days=30)  # Example: 30 days ago
end_time = datetime.now()  # Current time

# ...

def get_historical_data(symbol, timeframe, start_time, end_time):
    try:
        # Retrieve data from MT5
        rates = mt5.copy_rates_range(symbol, timeframe, start_time, end_time)
        if rates is None or len(rates) == 0:
            raise ValueError(f"Failed to retrieve historical data for {symbol} with timeframe {timeframe} from {start_time} to {end_time}")
        
        data = pd.DataFrame(rates, columns=['time', 'open', 'high', 'low', 'close', 'tick_volume', 'spread', 'real_volume'])
        data['time'] = pd.to_datetime(data['time'], unit='s')
        
        print(f"Historical data shape after retrieval: {data.shape}")
        print(f"Historical data head after retrieval:\n{data.head()}")
        
        if data.empty:
            raise ValueError(f"No historical data retrieved for {symbol} with timeframe {timeframe} from {start_time} to {end_time}")

        return data
    except Exception as e:
        handle_error(e, f"Failed to retrieve historical data for {symbol}")
        return None

# ...

# def get_historical_data(symbol, timeframe, start_time, end_time):
#     try:
#         # Retrieve data from MT5
#         rates = mt5.copy_rates_range(symbol, timeframe, start_time, end_time)
#         data = pd.DataFrame(rates, columns=['time', 'open', 'high', 'low', 'close', 'tick_volume', 'spread', 'real_volume'])
#         data['time'] = pd.to_datetime(data['time'], unit='s')

#         return data
#     except Exception as e:
#         handle_error(e, f"Failed to retrieve historical data for {symbol}")
#         return None
#requests_cache.install_cache('historical_data_cache', backend='sqlite', expire_after=3600)

# def get_historical_data(symbol, timeframe, start_time, end_time):
#     try:
#         # Create a cached session
#         session = CachedSession('historical_data_cache', backend='sqlite', expire_after=3600)

#         # Check if data is available in cache
#         cache_key = f"{symbol}_{timeframe}_{start_time}_{end_time}"
        
#         def retrieve_data():
#             # Retrieve data from MT5
#             rates = mt5.copy_rates_range(symbol, timeframe, start_time, end_time)
#             data = pd.DataFrame(rates, columns=['time', 'open', 'high', 'low', 'close', 'tick_volume', 'spread', 'real_volume'])
#             data['time'] = pd.to_datetime(data['time'], unit='s')
#             return data

#         data = session.cache.get_or_set(cache_key, retrieve_data)

#         return data
#     except Exception as e:
#         handle_error(e, f"Failed to retrieve historical data for {symbol}")
#         return None
# def get_historical_data(symbol, timeframe, start_time, end_time):
#     try:
#         # Create a cached session
#         session = CachedSession('historical_data_cache', backend='sqlite', expire_after=3600)

#         # Check if data is available in cache
#         cache_key = f"{symbol}_{timeframe}_{start_time}_{end_time}"
#         cached_data = session.cache.get(cache_key)
#         if cached_data:
#             return pd.read_json(cached_data)

#         # Retrieve data from MT5
#         rates = mt5.copy_rates_range(symbol, timeframe, start_time, end_time)
#         data = pd.DataFrame(rates, columns=['time', 'open', 'high', 'low', 'close', 'tick_volume', 'spread', 'real_volume'])
#         data['time'] = pd.to_datetime(data['time'], unit='s')

#         # Store data in cache
#         session.cache.set(cache_key, data.to_json())

#         return data
#     except Exception as e:
#         handle_error(e, f"Failed to retrieve historical data for {symbol}")
#         return None
    
def retrieve_historical_data(symbol, start_date, end_date, timeframe):
    rates = mt5.copy_rates_range(symbol, timeframe, start_date, end_date)
    data = pd.DataFrame(rates, columns=['time', 'open', 'high', 'low', 'close', 'tick_volume', 'spread', 'real_volume'])
    data['time'] = pd.to_datetime(data['time'], unit='s')
    return data

def get_current_price(symbol):
    prices = mt5.symbol_info_tick(symbol)
    if prices:
        return prices.last
    else:
        print(f"Failed to retrieve current price for {symbol}")
        return None

def get_account_info():
    account_info = mt5.account_info()
    if account_info:
        return account_info._asdict()
    else:
        print("Failed to retrieve account information")
        return None

def get_available_symbols():
    symbols = mt5.symbols_get()
    if symbols:
        return [symbol.name for symbol in symbols]
    else:
        print("Failed to retrieve available symbols")
        return None

def get_symbol_info(symbol):
    symbol_info = mt5.symbol_info(symbol)
    if symbol_info:
        return symbol_info._asdict()
    else:
        print(f"Failed to retrieve information for {symbol}")
        return None

def get_positions():
    positions = mt5.positions_get()
    if positions:
        positions_data = []
        for position in positions:
            position_data = position._asdict()
            positions_data.append(position_data)
        return positions_data
    else:
        print("No open positions found")
        return None

def get_orders():
    orders = mt5.orders_get()
    if orders:
        orders_data = []
        for order in orders:
            order_data = order._asdict()
            orders_data.append(order_data)
        return orders_data
    else:
        print("No pending orders found")
        return None

if __name__ == '__main__':
    if initialize_mt5():
        symbol = "EURUSD"
        timeframe = mt5.TIMEFRAME_H1
        start_time = datetime(2023, 1, 1)
        end_time = datetime.now()

        historical_data = get_historical_data(symbol, timeframe, start_time, end_time)
        if historical_data is not None:
            print(f"Historical data for {symbol}:")
            print(historical_data.head())

        current_price = get_current_price(symbol)
        if current_price is not None:
            print(f"Current price for {symbol}: {current_price}")

        account_info = get_account_info()
        if account_info is not None:
            print("Account information:")
            print(account_info)

        available_symbols = get_available_symbols()
        if available_symbols is not None:
            print("Available symbols:")
            print(available_symbols)

        symbol_info = get_symbol_info(symbol)
        if symbol_info is not None:
            print(f"Symbol information for {symbol}:")
            print(symbol_info)

        positions = get_positions()
        if positions is not None:
            print("Open positions:")
            print(positions)

        orders = get_orders()
        if orders is not None:
            print("Pending orders:")
            print(orders)

        shutdown_mt5()
</document_content>
</document>

<document index="8">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\metatrader\indicators.py</source>
<document_content>
import logging
import pandas as pd


def calculate_ema(prices, period):
    if isinstance(prices, (float, int)):
        return prices
    elif isinstance(prices, (list, np.ndarray, pd.Series)):
        ema_values = np.zeros_like(prices)
        ema_values[:period] = np.nan
        sma = np.mean(prices[:period])
        ema_values[period - 1] = sma
        multiplier = 2 / (period + 1)
        for i in range(period, len(prices)):
            if ema_values[i - 1] == 0:
                logging.error("Division by zero: ema_values[i - 1] is zero in calculate_ema")
                continue
            ema_values[i] = (prices[i] - ema_values[i - 1]) * multiplier + ema_values[i - 1]
        return pd.Series(ema_values, index=prices.index)
    else:
        raise ValueError("Invalid input type for prices. Expected float, int, list, numpy array, or pandas Series.")

</document_content>
</document>

<document index="9">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\metatrader\trade_management.py</source>
<document_content>
import MetaTrader5 as mt5

def place_order(symbol, order_type, volume, price=None, sl=None, tp=None):
    order = mt5.ORDER_TYPE_BUY if order_type == 'buy' else mt5.ORDER_TYPE_SELL
    request = {
        "action": mt5.TRADE_ACTION_DEAL,
        "symbol": symbol,
        "volume": volume,
        "type": order,
        "price": mt5.symbol_info_tick(symbol).ask if order_type == 'buy' else mt5.symbol_info_tick(symbol).bid,
        "sl": sl,
        "tp": tp,
        "deviation": 10,
        "magic": 234000,
        "comment": "python script order",
        "type_time": mt5.ORDER_TIME_GTC,
        "type_filling": mt5.ORDER_FILLING_IOC,
    }
    result = mt5.order_send(request)
    return result.comment if result else 'Order failed'

def close_position(ticket):
    position = mt5.positions_get(ticket=ticket)
    if position:
        result = mt5.Close(ticket)
        return result.comment if result else 'Close failed'
    return 'Position not found'

def modify_order(ticket, sl=None, tp=None):
    result = mt5.order_check(ticket)
    if result and result.type in [mt5.ORDER_TYPE_BUY, mt5.ORDER_TYPE_SELL]:
        request = {
            "action": mt5.TRADE_ACTION_SLTP,
            "ticket": ticket,
            "sl": sl,
            "tp": tp
        }
        result = mt5.order_send(request)
        return result.comment if result else 'Modify failed'
    return 'Order not found'

</document_content>
</document>

<document index="10">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\metatrader\__init__.py</source>
<document_content>
from .data_retrieval import get_historical_data
# tests/__init__.py
import unittest

def suite():
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    suite.addTests(loader.discover('C:\\Users\\16198\\Desktop\\automation\\upwork\\wavy\\wavy_tunnel_bot\\tests', pattern='test_*.py'))
    return suite

if __name__ == '__main__':
    runner = unittest.TextTestRunner()
    runner.run(suite())
</document_content>
</document>

<document index="11">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\strategy\trade_logic.py</source>
<document_content>
from utils.error_handling import handle_error
from tunnel_strategy import execute_trade, manage_position
import logging

def calculate_position_size(balance, risk_percent, stop_loss_pips, pip_value):
    risk_amount = balance * risk_percent
    if stop_loss_pips == 0 or pip_value == 0:
        logging.error("stop_loss_pips or pip_value cannot be zero.")
        return 0  # Return 0 or handle the error appropriately

    position_size = risk_amount / (stop_loss_pips * pip_value)
    return position_size

def entry_long(symbol, lot_size, price, sl, tp, deviation, magic, comment):
    trade_request = {
        'action': 'BUY',
        'symbol': symbol,
        'volume': lot_size,
        'price': price,
        'sl': sl,
        'tp': tp,
        'deviation': deviation,
        'magic': magic,
        'comment': comment,
        'type': 'ORDER_TYPE_BUY',
        'type_filling': 'ORDER_FILLING_FOK',
        'type_time': 'ORDER_TIME_GTC'
    }
    return execute_trade(trade_request)

def entry_short(symbol, lot_size, price, sl, tp, deviation, magic, comment):
    trade_request = {
        'action': 'SELL',
        'symbol': symbol,
        'volume': lot_size,
        'price': price,
        'sl': sl,
        'tp': tp,
        'deviation': deviation,
        'magic': magic,
        'comment': comment,
        'type': 'ORDER_TYPE_SELL',
        'type_filling': 'ORDER_FILLING_FOK',
        'type_time': 'ORDER_TIME_GTC'
    }
    return execute_trade(trade_request)

def exit_trade(position_ticket):
    try:
        close_request = {
            'action': 'CLOSE',
            'position': position_ticket,
            'type': 'ORDER_TYPE_CLOSE',
            'type_filling': 'ORDER_FILLING_FOK',
            'type_time': 'ORDER_TIME_GTC'
        }
        return execute_trade(close_request)
    except Exception as e:
        handle_error(e, "Failed to close the trade")
        return False
</document_content>
</document>

<document index="12">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\strategy\tunnel_strategy.py</source>
<document_content>

import numpy as np
from metatrader.data_retrieval import get_historical_data
from utils.error_handling import handle_error
from metatrader.indicators import calculate_ema
from metatrader.trade_management import place_order, close_position, modify_order
import pandas as pd
import MetaTrader5 as mt5
import logging

def calculate_ema(prices, period):
    if isinstance(prices, (float, int)):
        return prices
    elif isinstance(prices, (list, np.ndarray, pd.Series)):
        ema_values = np.zeros_like(prices)
        ema_values[:period] = np.nan
        sma = np.mean(prices[:period])
        ema_values[period - 1] = sma
        multiplier = 2 / (period + 1)
        for i in range(period, len(prices)):
            if ema_values[i - 1] == 0:
                logging.error("Division by zero: ema_values[i - 1] is zero in calculate_ema")
                continue
            ema_values[i] = (prices[i] - ema_values[i - 1]) * multiplier + ema_values[i - 1]
        return pd.Series(ema_values, index=prices.index)
    else:
        raise ValueError("Invalid input type for prices. Expected float, int, list, numpy array, or pandas Series.")

def detect_peaks_and_dips(df, peak_type):
    peaks = []
    dips = []
    for i in range(len(df)):
        if i < peak_type or i >= len(df) - peak_type:
            continue
        is_peak = True
        is_dip = True
        for j in range(peak_type):
            if df['high'][i] <= df['high'][i-j] or df['high'][i] <= df['high'][i+j]:
                is_peak = False
            if df['low'][i] >= df['low'][i-j] or df['low'][i] >= df['low'][i+j]:
                is_dip = False
        if is_peak:
            peaks.append(df['high'][i])
        if is_dip:
            dips.append(df['low'][i])
    return peaks, dips

def check_entry_conditions(row, peaks, dips, symbol):
    buy_condition = (
        row['close'] > max(row['wavy_c'], row['wavy_h'], row['wavy_l']) and
        min(row['wavy_c'], row['wavy_h'], row['wavy_l']) > max(row['tunnel1'], row['tunnel2']) and
        row['close'] in peaks  # Check if the current close price is a peak
    )
    sell_condition = (
        row['close'] < min(row['wavy_c'], row['wavy_h'], row['wavy_l']) and
        max(row['wavy_c'], row['wavy_h'], row['wavy_l']) < min(row['tunnel1'], row['tunnel2']) and
        row['close'] in dips  # Check if the current close price is a dip
    )
    threshold_values = {
        'USD': 2,
        'EUR': 2,
        'JPY': 300,
        'GBP': 6,
        'CHF': 2,
        'AUD': 2,
        'default': 100
    }
    apply_threshold = True
    if apply_threshold:
        threshold = threshold_values.get(symbol[:3], threshold_values['default']) * mt5.symbol_info(symbol).trade_tick_size
        if threshold == 0:
            logging.error("Division by zero: threshold value is zero in check_entry_conditions")
            return False, False
        buy_condition &= row['close'] > max(row['wavy_c'], row['wavy_h'], row['wavy_l']) + threshold
        sell_condition &= row['close'] < min(row['wavy_c'], row['wavy_h'], row['wavy_l']) - threshold
    return buy_condition, sell_condition

def execute_trade(trade_request):
    try:
        result = place_order(
            trade_request['symbol'],
            trade_request['action'].lower(),
            trade_request['volume'],
            trade_request['price'],
            trade_request['sl'],
            trade_request['tp']
        )
        if result == 'Order failed':
            raise Exception("Failed to execute trade")
        trade_request['profit'] = 0  # Initialize profit to 0
        return result
    except Exception as e:
        handle_error(e, "Failed to execute trade")
        return None
    
def manage_position(symbol, min_take_profit, max_loss_per_day, starting_equity, max_trades_per_day):
    try:
        positions = mt5.positions_get(symbol=symbol)
        if positions:
            for position in positions:
                if position.profit >= min_take_profit:
                    close_position(position.ticket)
                elif position.profit <= -max_loss_per_day:
                    close_position(position.ticket)
                else:
                    current_equity = mt5.account_info().equity
                    if current_equity <= starting_equity * 0.9:  # Close position if equity drops by 10%
                        close_position(position.ticket)
                    elif mt5.positions_total() >= max_trades_per_day:
                        close_position(position.ticket)
    except Exception as e:
        handle_error(e, "Failed to manage position")

def calculate_tunnel_bounds(data, period, deviation_factor):
    ema = calculate_ema(data['close'], period)
    volatility = np.std(data['close'])
    deviation = deviation_factor * volatility
    upper_bound = ema + deviation
    lower_bound = ema - deviation
    return upper_bound, lower_bound

def calculate_position_size(account_balance, risk_per_trade, stop_loss_pips, pip_value):
    risk_amount = account_balance * risk_per_trade
    if stop_loss_pips == 0 or pip_value == 0:
        logging.error("Division by zero: stop_loss_pips or pip_value is zero in calculate_position_size")
        raise ZeroDivisionError("stop_loss_pips or pip_value cannot be zero")
    position_size = risk_amount / (stop_loss_pips * pip_value)
    return position_size

def generate_trade_signal(data, period, deviation_factor):
    upper_bound, lower_bound = calculate_tunnel_bounds(data, period, deviation_factor)

    if len(upper_bound) > 0 and len(lower_bound) > 0:
        if data['close'].iloc[-1] > upper_bound.iloc[-1]:
            return 'BUY'
        elif data['close'].iloc[-1] < lower_bound.iloc[-1]:
            return 'SELL'

    return None

def adjust_deviation_factor(market_conditions):
    if market_conditions == 'volatile':
        return 2.5
    else:
        return 2.0

def run_strategy(symbols, mt5_init, timeframe, lot_size, min_take_profit, max_loss_per_day, starting_equity, max_trades_per_day, run_backtest=False):
    try:
        for symbol in symbols:
            start_time = pd.Timestamp.now() - pd.Timedelta(days=30)  # Example: 30 days ago
            end_time = pd.Timestamp.now()  # Current time
            data = get_historical_data(symbol, timeframe, start_time, end_time)
            if data is None:
                raise Exception(f"Failed to retrieve historical data for {symbol}")

            print(f"Historical data shape before calculations: {data.shape}")
            print(f"Historical data head before calculations:\n{data.head()}")
            print(f"Historical data for {symbol}:")
            print(data.head())
            print(f"Data types: {data.dtypes}")

            period = 20
            market_conditions = 'volatile'  # Placeholder for determining market conditions
            deviation_factor = adjust_deviation_factor(market_conditions)

            print("Calculating Wavy Tunnel indicators...")
            data['wavy_h'] = calculate_ema(data['high'], 34)
            data['wavy_c'] = calculate_ema(data['close'], 34)
            data['wavy_l'] = calculate_ema(data['low'], 34)
            data['tunnel1'] = calculate_ema(data['close'], 144)
            data['tunnel2'] = calculate_ema(data['close'], 169)
            data['long_term_ema'] = calculate_ema(data['close'], 200)
            print("Indicators calculated.")

            print("Detecting peaks and dips...")
            peak_type = 21  # Define the peak_type variable
            peaks, dips = detect_peaks_and_dips(data, peak_type)
            print(f"Peaks: {peaks[:5]}")
            print(f"Dips: {dips[:5]}")

            print(f"Historical data shape after calculations: {data.shape}")
            print(f"Historical data head after calculations:\n{data.head()}")

            print("Generating entry signals...")
            data['buy_signal'], data['sell_signal'] = zip(*data.apply(lambda x: check_entry_conditions(x, peaks, dips, symbol), axis=1))
            print("Entry signals generated.")

            if run_backtest:
                # Run backtest
                print("Running backtest...")
                # Backtest logic here
            else:
                # Run live trading
                signal = generate_trade_signal(data, period, deviation_factor)

                if signal == 'BUY':
                    trade_request = {
                        'action': 'BUY',
                        'symbol': symbol,
                        'volume': lot_size,
                        'price': data['close'].iloc[-1],
                        'sl': data['close'].iloc[-1] - (1.5 * np.std(data['close'])),
                        'tp': data['close'].iloc[-1] + (2 * np.std(data['close'])),
                        'deviation': 10,
                        'magic': 12345,
                        'comment': 'Tunnel Strategy',
                        'type': 'ORDER_TYPE_BUY',
                        'type_filling': 'ORDER_FILLING_FOK',
                        'type_time': 'ORDER_TIME_GTC'
                    }
                    print(f"Executing BUY trade for {symbol}...")
                    execute_trade(trade_request)
                elif signal == 'SELL':
                    trade_request = {
                        'action': 'SELL',
                        'symbol': symbol,
                        'volume': lot_size,
                        'price': data['close'].iloc[-1],
                        'sl': data['close'].iloc[-1] + (1.5 * np.std(data['close'])),
                        'tp': data['close'].iloc[-1] - (2 * np.std(data['close'])),
                        'deviation': 10,
                        'magic': 12345,
                        'comment': 'Tunnel Strategy',
                        'type': 'ORDER_TYPE_SELL',
                        'type_filling': 'ORDER_FILLING_FOK',
                        'type_time': 'ORDER_TIME_GTC'
                    }
                    print(f"Executing SELL trade for {symbol}...")
                    execute_trade(trade_request)

                manage_position(symbol, min_take_profit, max_loss_per_day, starting_equity, max_trades_per_day)

    except Exception as e:
        handle_error(e, "Failed to run the strategy")
        raise
</document_content>
</document>

<document index="13">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\strategy\__init__.py</source>
<document_content>
from .tunnel_strategy import run_strategy
</document_content>
</document>

<document index="14">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\tests\__init__.py</source>
<document_content>

</document_content>
</document>

<document index="15">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\tests\config\test_config.py</source>
<document_content>
import unittest
from unittest.mock import patch
from config import Config

class TestConfig(unittest.TestCase):
    @patch('os.getenv')
    def test_mt5_login_not_set(self, mock_getenv):
        mock_getenv.return_value = None
        with self.assertRaises(ValueError):
            Config.MT5_LOGIN

    @patch('os.getenv', return_value='valid_value')
    def test_mt5_login_set(self, mock_getenv):
        self.assertEqual(Config.MT5_LOGIN, 'valid_value')

    @patch('os.getenv', side_effect=lambda k, v=None: {
        'MT5_TIMEFRAME': 'H1',
        'SYMBOLS': 'EURUSD,GBPUSD',
        'MIN_TP_PROFIT': '50.0',
        'MAX_LOSS_PER_DAY': '1000.0',
        'STARTING_EQUITY': '10000.0',
        'LIMIT_NO_OF_TRADES': '5',
        'RISK_PER_TRADE': '0.01',
        'PIP_VALUE': '1'
    }.get(k, v))
    def test_valid_config(self, mock_getenv):
        Config.validate()

</document_content>
</document>

<document index="16">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\tests\metatrader\test_connection.py</source>
<document_content>
import unittest
from unittest.mock import patch
from metatrader.connection import initialize_mt5, shutdown_mt5

class TestConnection(unittest.TestCase):
    @patch('MetaTrader5.initialize', return_value=True)
    def test_initialize_mt5_success(self, mock_initialize):
        self.assertTrue(initialize_mt5())

    @patch('MetaTrader5.initialize', return_value=False)
    def test_initialize_mt5_failure(self, mock_initialize):
        self.assertFalse(initialize_mt5())

    @patch('MetaTrader5.shutdown')
    def test_shutdown_mt5(self, mock_shutdown):
        shutdown_mt5()
        mock_shutdown.assert_called_once()

if __name__ == '__main__':
    unittest.main()
</document_content>
</document>

<document index="17">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\tests\metatrader\test_data_retrieval.py</source>
<document_content>
import unittest
from unittest.mock import patch
from datetime import datetime
from metatrader.data_retrieval import get_historical_data

class TestDataRetrieval(unittest.TestCase):
    @patch('MetaTrader5.copy_rates_range', return_value=[])
    def test_get_historical_data_success(self, mock_copy_rates_range):
        symbol = "EURUSD"
        timeframe = 1
        start_time = datetime(2023, 1, 1)
        end_time = datetime.now()
        data = get_historical_data(symbol, timeframe, start_time, end_time)
        self.assertIsNotNone(data)

    @patch('MetaTrader5.copy_rates_range', return_value=None)
    def test_get_historical_data_failure(self, mock_copy_rates_range):
        symbol = "EURUSD"
        timeframe = 1
        start_time = datetime(2023, 1, 1)
        end_time = datetime.now()
        data = get_historical_data(symbol, timeframe, start_time, end_time)
        self.assertIsNone(data)

if __name__ == '__main__':
    unittest.main()
</document_content>
</document>

<document index="18">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\tests\metatrader\test_indicators.py</source>
<document_content>
import unittest
from metatrader.indicators import calculate_ema

class TestIndicators(unittest.TestCase):
    def test_calculate_ema(self):
        data = [100, 200, 300, 400, 500]
        period = 3
        expected_ema = [100.0, 150.0, 233.33333333333334, 344.44444444444446, 455.55555555555554]
        self.assertEqual(calculate_ema(data, period), expected_ema)

if __name__ == '__main__':
    unittest.main()
    unittest.main()
</document_content>
</document>

<document index="19">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\tests\metatrader\test_trade_management.py</source>
<document_content>
import unittest
from unittest.mock import patch
from metatrader.trade_management import place_order, close_position, modify_order

class TestTradeManagement(unittest.TestCase):
    @patch('MetaTrader5.order_send', return_value={'retcode': 10009})  # 10009: SUCCESS
    def test_place_order_success(self, mock_order_send):
        symbol = "EURUSD"
        order_type = "buy"
        volume = 0.1
        price = 1.2345
        sl = 1.2300
        tp = 1.2400
        result = place_order(symbol, order_type, volume, price, sl, tp)
        self.assertEqual(result, "python script order")

    @patch('MetaTrader5.order_send', return_value={'retcode': 10004})  # 10004: ERROR
    def test_place_order_failure(self, mock_order_send):
        symbol = "EURUSD"
        order_type = "buy"
        volume = 0.1
        price = 1.2345
        sl = 1.2300
        tp = 1.2400
        result = place_order(symbol, order_type, volume, price, sl, tp)
        self.assertEqual(result, "Order failed")

    @patch('MetaTrader5.positions_get', return_value=[{"ticket": 12345}])
    @patch('MetaTrader5.Close', return_value={"comment": "Close successful"})
    def test_close_position_success(self, mock_close, mock_positions_get):
        ticket = 12345
        result = close_position(ticket)
        self.assertEqual(result, "Close successful")

    @patch('MetaTrader5.positions_get', return_value=[])
    def test_close_position_failure(self, mock_positions_get):
        ticket = 12345
        result = close_position(ticket)
        self.assertEqual(result, "Position not found")

    @patch('MetaTrader5.order_check', return_value={"type": 0})  # 0: BUY
    @patch('MetaTrader5.order_send', return_value={"comment": "Modify successful"})
    def test_modify_order_success(self, mock_order_send, mock_order_check):
        ticket = 12345
        sl = 1.2300
        tp = 1.2400
        result = modify_order(ticket, sl, tp)
        self.assertEqual(result, "Modify successful")

    @patch('MetaTrader5.order_check', return_value=None)
    def test_modify_order_failure(self, mock_order_check):
        ticket = 12345
        sl = 1.2300
        tp = 1.2400
        result = modify_order(ticket, sl, tp)
        self.assertEqual(result, "Order not found")

if __name__ == '__main__':
    unittest.main()
</document_content>
</document>

<document index="20">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\tests\strategy\test_strategy.py</source>
<document_content>
import unittest
from unittest.mock import patch, MagicMock
import pandas as pd
import numpy as np
from strategy.tunnel_strategy import (
    calculate_ema, detect_peaks_and_dips, check_entry_conditions, execute_trade,
    manage_position, calculate_tunnel_bounds, calculate_position_size,
    generate_trade_signal, adjust_deviation_factor, run_strategy
)

class TestStrategy(unittest.TestCase):
    def test_calculate_ema(self):
        prices = pd.Series([100, 200, 300, 400, 500])
        period = 3
        expected_ema = pd.Series([np.nan, np.nan, 233.33333333333334, 344.44444444444446, 455.55555555555554])
        self.assertTrue(calculate_ema(prices, period).equals(expected_ema))

    def test_detect_peaks_and_dips(self):
        df = pd.DataFrame({
            'high': [100, 200, 300, 400, 500],
            'low': [50, 100, 150, 200, 250]
        })
        peak_type = 1
        expected_peaks = [200, 300, 400, 500]
        expected_dips = [50, 100, 150, 200, 250]
        peaks, dips = detect_peaks_and_dips(df, peak_type)
        self.assertEqual(peaks, expected_peaks)
        self.assertEqual(dips, expected_dips)

    def test_check_entry_conditions(self):
        row = {
            'close': 250,
            'wavy_c': 200,
            'wavy_h': 300,
            'wavy_l': 100,
            'tunnel1': 150,
            'tunnel2': 180
        }
        peaks = [250]
        dips = [100]
        symbol = "EURUSD"
        mt5 = MagicMock()
        mt5.symbol_info.return_value.trade_tick_size = 0.00001
        with patch('MetaTrader5.symbol_info', mt5.symbol_info):
            buy_condition, sell_condition = check_entry_conditions(row, peaks, dips, symbol)
            self.assertTrue(buy_condition)
            self.assertFalse(sell_condition)

    @patch('strategy.tunnel_strategy.place_order')
    def test_execute_trade(self, mock_place_order):
        trade_request = {
            'symbol': 'EURUSD',
            'action': 'BUY',
            'volume': 0.1,
            'price': 1.2345,
            'sl': 1.2300,
            'tp': 1.2400
        }
        mock_place_order.return_value = 'Order placed'
        result = execute_trade(trade_request)
        self.assertEqual(result, 'Order placed')

    @patch('MetaTrader5.positions_get')
    @patch('MetaTrader5.account_info')
    @patch('MetaTrader5.positions_total')
    @patch('strategy.tunnel_strategy.close_position')
    def test_manage_position(self, mock_close_position, mock_positions_total, mock_account_info, mock_positions_get):
        symbol = 'EURUSD'
        min_take_profit = 100
        max_loss_per_day = 1000
        starting_equity = 10000
        max_trades_per_day = 5
        position = MagicMock()
        position.profit = 200
        position.ticket = 12345
        mock_positions_get.return_value = [position]
        mock_account_info.return_value.equity = 9500
        mock_positions_total.return_value = 3
        manage_position(symbol, min_take_profit, max_loss_per_day, starting_equity, max_trades_per_day)
        mock_close_position.assert_called_once_with(position.ticket)

    def test_calculate_tunnel_bounds(self):
        data = pd.DataFrame({
            'close': [100, 200, 300, 400, 500]
        })
        period = 3
        deviation_factor = 2
        expected_upper_bound = pd.Series([np.nan, np.nan, 466.66666666666663, 688.8888888888889, 911.1111111111111])
        expected_lower_bound = pd.Series([np.nan, np.nan, 0.0, 0.0, 0.0])
        upper_bound, lower_bound = calculate_tunnel_bounds(data, period, deviation_factor)
        self.assertTrue(upper_bound.equals(expected_upper_bound))
        self.assertTrue(lower_bound.equals(expected_lower_bound))

    def test_calculate_position_size(self):
        account_balance = 10000
        risk_per_trade = 0.02
        stop_loss_pips = 50
        pip_value = 10
        expected_position_size = 4.0
        position_size = calculate_position_size(account_balance, risk_per_trade, stop_loss_pips, pip_value)
        self.assertEqual(position_size, expected_position_size)

    def test_generate_trade_signal(self):
        data = pd.DataFrame({
            'close': [100, 200, 300, 400, 500]
        })
        period = 3
        deviation_factor = 2
        expected_signal = 'BUY'
        signal = generate_trade_signal(data, period, deviation_factor)
        self.assertEqual(signal, expected_signal)

    def test_adjust_deviation_factor(self):
        market_conditions = 'volatile'
        expected_deviation_factor = 2.5
        deviation_factor = adjust_deviation_factor(market_conditions)
        self.assertEqual(deviation_factor, expected_deviation_factor)

    @patch('strategy.tunnel_strategy.get_historical_data')
    @patch('strategy.tunnel_strategy.execute_trade')
    @patch('strategy.tunnel_strategy.manage_position')
    def test_run_strategy(self, mock_manage_position, mock_execute_trade, mock_get_historical_data):
        symbols = ['EURUSD']
        mt5_init = MagicMock()
        timeframe = 'H1'
        lot_size = 0.1
        min_take_profit = 100
        max_loss_per_day = 1000
        starting_equity = 10000
        max_trades_per_day = 5
        mock_get_historical_data.return_value = pd.DataFrame({
            'open': [100, 200, 300, 400, 500],
            'high': [110, 220, 330, 440, 550],
            'low': [90, 180, 270, 360, 450],
            'close': [105, 210, 315, 420, 525],
            'tick_volume': [1000, 2000, 3000, 4000, 5000],
            'spread': [10, 20, 30, 40, 50],
            'real_volume': [100, 200, 300, 400, 500]
        })
        run_strategy(symbols, mt5_init, timeframe, lot_size, min_take_profit, max_loss_per_day, starting_equity, max_trades_per_day)
        mock_execute_trade.assert_called()
        mock_manage_position.assert_called()

if __name__ == '__main__':
    unittest.main()
</document_content>
</document>

<document index="21">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\tests\utils\test_data_validation.py</source>
<document_content>
import unittest
from utils.data_validation import validate_data, sanitize_data, validate_trade_request, validate_close_request

class TestDataValidation(unittest.TestCase):
    def test_validate_data(self):
        data = {
            "action": "BUY",
            "symbol": "EURUSD",
            "volume": 0.1,
            "price": 1.2345,
            "sl": 1.2300,
            "tp": 1.2400,
            "deviation": 10,
            "magic": 12345,
            "comment": "Test order",
            "type": "ORDER_TYPE_BUY",
            "type_filling": "ORDER_FILLING_FOK",
            "type_time": "ORDER_TIME_GTC"
        }
        self.assertTrue(validate_data(data, validate_trade_request))

    def test_sanitize_data(self):
        data = {
            "action": "  BUY  ",
            "symbol": "EURUSD",
            "volume": 0.1,
            "price": 1.2345,
            "sl": 1.2300,
            "tp": 1.2400
        }
        sanitized_data = sanitize_data(data)
        self.assertEqual(sanitized_data["action"], "BUY")

if __name__ == '__main__':
    unittest.main()
</document_content>
</document>

<document index="22">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\tests\utils\test_error_handling.py</source>
<document_content>
import unittest
from unittest.mock import patch
from utils.error_handling import handle_error, critical_error, warn_error

class TestErrorHandling(unittest.TestCase):
    @patch('logging.error')
    def test_handle_error(self, mock_logging_error):
        error = ValueError("Test error")
        message = "An error occurred"
        handle_error(error, message)
        mock_logging_error.assert_called_with(f"{message}: {str(error)}")

    @patch('logging.critical')
    def test_critical_error(self, mock_logging_critical):
        error = ValueError("Test critical error")
        message = "A critical error occurred"
        with self.assertRaises(SystemExit):
            critical_error(error, message)
        mock_logging_critical.assert_called_with(f"{message}: {str(error)}")

    @patch('logging.warning')
    def test_warn_error(self, mock_logging_warning):
        error = ValueError("Test warning")
        message = "A warning occurred"
        warn_error(error, message)
        mock_logging_warning.assert_called_with(f"{message}: {str(error)}")

if __name__ == '__main__':
    unittest.main()
</document_content>
</document>

<document index="23">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\tests\utils\test_logger.py</source>
<document_content>
import unittest
from unittest.mock import patch
from utils.logger import setup_logging

class TestLogger(unittest.TestCase):
    @patch('logging.basicConfig')
    def test_setup_logging(self, mock_logging_basicConfig):
        log_level = 20
        log_file = "test.log"
        setup_logging(log_level, log_file)
        mock_logging_basicConfig.assert_called_once()

if __name__ == '__main__':
    unittest.main()
</document_content>
</document>

<document index="24">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\tests\utils\test_plotting.py</source>
<document_content>
import unittest
from unittest.mock import patch
from utils.plotting import plot_backtest_results

class TestPlotting(unittest.TestCase):
    @patch('matplotlib.pyplot.show')
    def test_plot_backtest_results(self, mock_pyplot_show):
        data = {
            'time': [1, 2, 3],
            'close': [100, 200, 300]
        }
        trades = [
            {'entry_time': 1, 'entry_price': 100, 'exit_time': 2, 'exit_price': 200},
            {'entry_time': 2, 'entry_price': 200, 'exit_time': 3, 'exit_price': 300}
        ]
        plot_backtest_results(data, trades)
        mock_pyplot_show.assert_called_once()

if __name__ == '__main__':
    unittest.main()
</document_content>
</document>

<document index="25">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\utils\data_validation.py</source>
<document_content>
from typing import Any
from pydantic import BaseModel, ValidationError
import logging
from .error_handling import handle_error

class TradeRequestSchema(BaseModel):
    action: str
    symbol: str
    volume: float
    price: float
    sl: float
    tp: float
    deviation: int
    magic: int
    comment: str
    type: str
    type_filling: str
    type_time: str

class CloseRequestSchema(BaseModel):
    action: str
    position: int
    type: str
    type_filling: str
    type_time: str

def validate_data(data: Any, schema: dict) -> bool:
    try:
        if schema == TradeRequestSchema.schema():
            TradeRequestSchema(**data)
        elif schema == CloseRequestSchema.schema():
            CloseRequestSchema(**data)
        else:
            raise ValueError("Invalid schema provided")
        return True
    except ValidationError as e:
        handle_error(e, "Data validation failed")
        return False

def sanitize_data(data: Any) -> Any:
    try:
        if isinstance(data, dict):
            sanitized_data = {}
            for key, value in data.items():
                sanitized_data[key.strip()] = sanitize_data(value)
            return sanitized_data
        elif isinstance(data, list):
            return [sanitize_data(item) for item in data]
        elif isinstance(data, str):
            return data.strip()
        else:
            return data
    except Exception as e:
        handle_error(e, "Data sanitization failed")
        return None

def validate_trade_request(trade_request):
    required_fields = ['action', 'symbol', 'volume', 'price', 'sl', 'tp', 'deviation', 'magic', 'comment', 'type', 'type_filling', 'type_time']
    for field in required_fields:
        if field not in trade_request:
            raise ValueError(f"Missing required field: {field}")

    if trade_request['action'] not in ['BUY', 'SELL']:
        raise ValueError("Invalid trade action. Must be 'BUY' or 'SELL'")

    if trade_request['type'] not in ['ORDER_TYPE_BUY', 'ORDER_TYPE_SELL']:
        raise ValueError("Invalid order type. Must be 'ORDER_TYPE_BUY' or 'ORDER_TYPE_SELL'")

    if trade_request['type_filling'] != 'ORDER_FILLING_FOK':
        raise ValueError("Invalid order filling type. Must be 'ORDER_FILLING_FOK'")

    if trade_request['type_time'] != 'ORDER_TIME_GTC':
        raise ValueError("Invalid order time type. Must be 'ORDER_TIME_GTC'")

def validate_close_request(close_request):
    required_fields = ['action', 'position', 'type', 'type_filling', 'type_time']
    for field in required_fields:
        if field not in close_request:
            raise ValueError(f"Missing required field: {field}")

    if close_request['action'] != 'CLOSE':
        raise ValueError("Invalid close action. Must be 'CLOSE'")

    if close_request['type'] != 'ORDER_TYPE_CLOSE':
        raise ValueError("Invalid order type. Must be 'ORDER_TYPE_CLOSE'")

    if close_request['type_filling'] != 'ORDER_FILLING_FOK':
        raise ValueError("Invalid order filling type. Must be 'ORDER_FILLING_FOK'")

    if close_request['type_time'] != 'ORDER_TIME_GTC':
        raise ValueError("Invalid order time type. Must be 'ORDER_TIME_GTC'")

</document_content>
</document>

<document index="26">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\utils\error_handling.py</source>
<document_content>
import logging

def handle_error(error, message):
    logging.error(f"{message}: {str(error)}")

def critical_error(error, message):
    logging.critical(f"{message}: {str(error)}")
    raise SystemExit(1)

def warn_error(error, message):
    logging.warning(f"{message}: {str(error)}")

</document_content>
</document>

<document index="27">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\utils\logger.py</source>
<document_content>
import logging
import os

def setup_logging(log_level=logging.INFO, log_file="app.log"):
    """
    Set up logging configuration.
    """
    log_formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")

    file_handler = logging.FileHandler(log_file)
    file_handler.setFormatter(log_formatter)

    console_handler = logging.StreamHandler()
    console_handler.setFormatter(log_formatter)

    # Ensure no duplicate handlers
    for handler in logging.root.handlers[:]:
        logging.root.removeHandler(handler)

    logging.basicConfig(level=log_level, handlers=[file_handler, console_handler])

</document_content>
</document>

<document index="28">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\utils\plotting.py</source>
<document_content>
import matplotlib.pyplot as plt

def plot_backtest_results(data, trades):
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))

    # Plot price data
    ax1.plot(data['time'], data['close'], label='Price')
    ax1.set_ylabel('Price')
    ax1.set_title('Backtest Results')
    ax1.grid(True)

    # Plot trades
    for trade in trades:
        entry_time = trade['entry_time']
        entry_price = trade['entry_price']
        exit_time = trade.get('exit_time')
        exit_price = trade.get('exit_price')

        if exit_time is None:
            ax1.plot(entry_time, entry_price, 'g^', markersize=8, label='Entry')
        else:
            ax1.plot(entry_time, entry_price, 'g^', markersize=8)
            ax1.plot(exit_time, exit_price, 'rv', markersize=8)
            ax1.plot([entry_time, exit_time], [entry_price, exit_price], 'k--')

    ax1.legend()

    # Plot account balance
    balance = [trade['balance'] for trade in trades]
    ax2.plot(data['time'], balance, label='Account Balance')
    ax2.set_ylabel('Balance')
    ax2.set_title('Account Balance')
    ax2.grid(True)
    ax2.legend()

    plt.tight_layout()
    plt.show()
</document_content>
</document>

<document index="29">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\utils\types.py</source>
<document_content>
from typing import NewType

TradeAction = NewType('TradeAction', str)
OrderType = NewType('OrderType', str)
OrderFilling = NewType('OrderFilling', str)
OrderTime = NewType('OrderTime', str)
# Define custom types
Symbol = NewType("Symbol", str)
Timeframe = NewType("Timeframe", str)
LotSize = NewType("LotSize", float)
</document_content>
</document>

<document index="30">
<source>C:\Users\16198\Desktop\automation\upwork\wavy\wavy_tunnel_bot\utils\__init__.py</source>
<document_content>
from .data_validation import validate_data, sanitize_data, validate_trade_request, validate_close_request
from .logger import setup_logging
from .types import TradeAction, OrderType, OrderFilling, OrderTime, Symbol, Timeframe, LotSize
</document_content>
</document>

</documents>